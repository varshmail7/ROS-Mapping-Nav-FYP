;; Auto-generated. Do not edit!


(when (boundp 'mybot_description::NavigateResult)
  (if (not (find-package "MYBOT_DESCRIPTION"))
    (make-package "MYBOT_DESCRIPTION"))
  (shadow 'NavigateResult (find-package "MYBOT_DESCRIPTION")))
(unless (find-package "MYBOT_DESCRIPTION::NAVIGATERESULT")
  (make-package "MYBOT_DESCRIPTION::NAVIGATERESULT"))

(in-package "ROS")
;;//! \htmlinclude NavigateResult.msg.html
(if (not (find-package "SENSOR_MSGS"))
  (ros::roseus-add-msgs "sensor_msgs"))


(defclass mybot_description::NavigateResult
  :super ros::object
  :slots (_goal_image _decision_score _status ))

(defmethod mybot_description::NavigateResult
  (:init
   (&key
    ((:goal_image __goal_image) (instance sensor_msgs::Image :init))
    ((:decision_score __decision_score) 0.0)
    ((:status __status) nil)
    )
   (send-super :init)
   (setq _goal_image __goal_image)
   (setq _decision_score (float __decision_score))
   (setq _status __status)
   self)
  (:goal_image
   (&rest __goal_image)
   (if (keywordp (car __goal_image))
       (send* _goal_image __goal_image)
     (progn
       (if __goal_image (setq _goal_image (car __goal_image)))
       _goal_image)))
  (:decision_score
   (&optional __decision_score)
   (if __decision_score (setq _decision_score __decision_score)) _decision_score)
  (:status
   (&optional __status)
   (if __status (setq _status __status)) _status)
  (:serialization-length
   ()
   (+
    ;; sensor_msgs/Image _goal_image
    (send _goal_image :serialization-length)
    ;; float64 _decision_score
    8
    ;; bool _status
    1
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; sensor_msgs/Image _goal_image
       (send _goal_image :serialize s)
     ;; float64 _decision_score
       (sys::poke _decision_score (send s :buffer) (send s :count) :double) (incf (stream-count s) 8)
     ;; bool _status
       (if _status (write-byte -1 s) (write-byte 0 s))
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; sensor_msgs/Image _goal_image
     (send _goal_image :deserialize buf ptr-) (incf ptr- (send _goal_image :serialization-length))
   ;; float64 _decision_score
     (setq _decision_score (sys::peek buf ptr- :double)) (incf ptr- 8)
   ;; bool _status
     (setq _status (not (= 0 (sys::peek buf ptr- :char)))) (incf ptr- 1)
   ;;
   self)
  )

(setf (get mybot_description::NavigateResult :md5sum-) "80cb4215bc51bc550fe50e7808061ee9")
(setf (get mybot_description::NavigateResult :datatype-) "mybot_description/NavigateResult")
(setf (get mybot_description::NavigateResult :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#Define the result
sensor_msgs/Image goal_image
float64 decision_score
bool status

================================================================================
MSG: sensor_msgs/Image
# This message contains an uncompressed image
# (0, 0) is at top-left corner of image
#

Header header        # Header timestamp should be acquisition time of image
                     # Header frame_id should be optical frame of camera
                     # origin of frame should be optical center of camera
                     # +x should point to the right in the image
                     # +y should point down in the image
                     # +z should point into to plane of the image
                     # If the frame_id here and the frame_id of the CameraInfo
                     # message associated with the image conflict
                     # the behavior is undefined

uint32 height         # image height, that is, number of rows
uint32 width          # image width, that is, number of columns

# The legal values for encoding are in file src/image_encodings.cpp
# If you want to standardize a new string format, join
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.

string encoding       # Encoding of pixels -- channel meaning, ordering, size
                      # taken from the list of strings in include/sensor_msgs/image_encodings.h

uint8 is_bigendian    # is this data bigendian?
uint32 step           # Full row length in bytes
uint8[] data          # actual matrix data, size is (step * rows)

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

")



(provide :mybot_description/NavigateResult "80cb4215bc51bc550fe50e7808061ee9")


